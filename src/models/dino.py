"""
Dino utils

Mostly copy-paste from Dino https://github.com/facebookresearch/dino/blob/main/utils.py
"""

import numpy as np
import torch.nn as nn
import math
import warnings
import torch
import torch.nn.functional as F
import torch.distributed as dist


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    # type: (torch.Tensor, float, float, float, float) -> torch.Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class DINOHead(nn.Module):
    def __init__(
        self,
        in_dim,
        out_dim,
        use_bn=False,
        norm_last_layer=True,
        nlayers=3,
        hidden_dim=2048,
        bottleneck_dim=256,
    ):
        super().__init__()
        nlayers = max(nlayers, 1)
        if nlayers == 1:
            self.mlp = nn.Linear(in_dim, bottleneck_dim)
        else:
            layers = [nn.Linear(in_dim, hidden_dim)]
            if use_bn:
                layers.append(nn.BatchNorm1d(hidden_dim))
            layers.append(nn.GELU())
            for _ in range(nlayers - 2):
                layers.append(nn.Linear(hidden_dim, hidden_dim))
                if use_bn:
                    layers.append(nn.BatchNorm1d(hidden_dim))
                layers.append(nn.GELU())
            layers.append(nn.Linear(hidden_dim, bottleneck_dim))
            self.mlp = nn.Sequential(*layers)
        self.apply(self._init_weights)
        self.last_layer = nn.utils.weight_norm(
            nn.Linear(bottleneck_dim, out_dim, bias=False)
        )
        self.last_layer.weight_g.data.fill_(1)
        if norm_last_layer:
            self.last_layer.weight_g.requires_grad = False

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = self.mlp(x)
        x = nn.functional.normalize(x, dim=-1, p=2)
        x = self.last_layer(x)
        return x


class DINOLoss(nn.Module):
    def __init__(
        self,
        out_dim,
        num_crops_tot,
        warmup_teacher_temp,
        teacher_temp,
        warmup_teacher_temp_epochs,
        nepochs,
        student_temp=0.1,
        center_momentum=0.9,
        num_global_crops=2,
    ):
        super().__init__()
        self.student_temp = student_temp
        self.center_momentum = center_momentum
        self.num_crops_tot = num_crops_tot
        self.num_global_crops = num_global_crops
        self.register_buffer("center", torch.zeros(1, out_dim))
        # we apply a warm up for the teacher temperature because
        # a too high temperature makes the training instable at the beginning
        self.teacher_temp_schedule = np.concatenate(
            (
                np.linspace(
                    warmup_teacher_temp, teacher_temp, warmup_teacher_temp_epochs
                ),
                np.ones(nepochs - warmup_teacher_temp_epochs) * teacher_temp,
            )
        )

    def forward(self, student_output, teacher_output, epoch):
        """
        Cross-entropy between softmax outputs of the teacher and student networks.
        """
        student_out = student_output / self.student_temp
        student_out = student_out.chunk(self.num_crops_tot)

        # teacher centering and sharpening
        temp = self.teacher_temp_schedule[epoch]
        teacher_out = F.softmax((teacher_output - self.center) / temp, dim=-1)
        teacher_out = teacher_out.detach().chunk(self.num_global_crops)

        total_loss = 0
        n_loss_terms = 0
        for iq, q in enumerate(teacher_out):
            for v in range(len(student_out)):
                if v == iq:
                    # we skip cases where student and teacher operate on the same view
                    continue
                loss = torch.sum(-q * F.log_softmax(student_out[v], dim=-1), dim=-1)
                total_loss += (
                    loss.mean()
                )  # TODO/FIXME: verify that this make sense with pl automatic loss avergaging
                n_loss_terms += 1
        total_loss /= n_loss_terms
        self.update_center(teacher_output)
        return total_loss

    @torch.no_grad()
    def update_center(self, teacher_output):
        """
        Update center used for teacher output.
        """
        batch_center = torch.sum(teacher_output, dim=0, keepdim=True)
        if dist.is_initialized():
            dist.all_reduce(batch_center)
            world_size = dist.get_world_size()
        else:
            world_size = 1
        batch_center = batch_center / (len(teacher_output) * world_size)

        # ema update
        self.center = self.center * self.center_momentum + batch_center * (
            1 - self.center_momentum
        )


class MultiCropWrapper(nn.Module):
    """
    Perform forward pass separately on each resolution input.
    The inputs corresponding to a single resolution are clubbed and a single
    forward is run on the same resolution inputs. Hence, we do several
    forward passes = number of different resolutions used. We then
    concatenate all the output features and run the head forward on these
    concatenated features.
    """

    def __init__(self, backbone, head, pooling="cls"):
        super(MultiCropWrapper, self).__init__()
        self.backbone = backbone
        self.head = head

        assert pooling in ["cls", "average"], "Only supported"
        if pooling == "cls":
            assert hasattr(
                backbone, "cls_token"
            ), "Backbone needs to have attribute CLS_token if pooling=CLS"

        self.pooling = pooling

    def forward(self, x):
        """
        Args:
            x (list of tuples): Each tuple contains (sequences, padding_masks)
                                sequences: torch.Tensor of shape (batch_size, seq_len, embed_dim)
                                padding_masks: torch.Tensor of shape (batch_size, seq_len)
        """
        # Convert to list if not already
        if not isinstance(x, list):
            x = [x]

        padding = len(x[0]) > 1

        # Extract sequence lengths to group same resolution inputs
        seq_lengths = [inp[0].shape[1] for inp in x]

        idx_crops = torch.cumsum(
            torch.unique_consecutive(
                torch.tensor(seq_lengths),
                return_counts=True,
            )[1],
            0,
        )

        start_idx, output = 0, torch.empty(0).to(x[0][0].device)

        for end_idx in idx_crops:
            sequences = torch.cat([x[i][0] for i in range(start_idx, end_idx)])
            if padding:
                padding_masks = torch.cat([x[i][1] for i in range(start_idx, end_idx)])
            _out = self.backbone(
                sequences,
                key_padding_mask=padding_masks if padding else None,
            )
            embeds = _out["emb"]
            # Pool over output sequence
            if self.pooling == "cls":
                embed = embeds[:, 0, :]  # shape (batch_size * num_crops, embed_dim)
            elif self.pooling == "average":
                embeds = embeds[:, _out["num_cem_tokens"] :, :]
                non_pad = ~padding_masks
                embeds = non_pad.unsqueeze(-1) * embeds
                embed = embeds.sum(dim=1) / non_pad.sum(
                    dim=-1, keepdim=True
                )  # shape (batch_size * num_crops, embed_dim)
            else:
                raise ValueError("Incorrect pooling type")

            # Accumulate outputs
            output = torch.cat((output, embed))
            start_idx = end_idx

        # Run the head forward on the concatenated features.
        return self.head(output)
